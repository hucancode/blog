{"pageProps":{"title":"Construct the array (Medium)","subtitle":"How to use Dynamic Programming to solve a programming puzzle","category":"Algorithm","date":"2022-06-23","content":"<h1 id=\"problem\" class=\"heading\">Problem</h1>\n<p>Your goal is to find the number of ways to construct an array such that consecutive positions contain different values.</p>\n<p>Specifically, we want to construct an array with <code>n</code> elements such that each element between <code>1</code> and <code>k</code>, inclusive. We also want the first and last elements of the array to be <code>1</code> and <code>x</code>.</p>\n<h2 id=\"example\" class=\"heading\">Example</h2>\n<p>For example, for <code>n=4</code>, <code>k=3</code>, <code>x=2</code>, there are <code>3</code> ways, as shown here:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span>\n</span><span class=\"code-line\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span>\n</span><span class=\"code-line\"><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span>\n</span></code></pre>\n<h2 id=\"constraints\" class=\"heading\">Constraints</h2>\n<ul>\n<li>3 &#x3C;= n &#x3C;= 10<sup>5</sup></li>\n<li>2 &#x3C;= k &#x3C;= 10<sup>5</sup></li>\n<li>1 &#x3C;= x &#x3C;= k</li>\n</ul>\n<p>Read more: <a href=\"https://www.hackerrank.com/challenges/construct-the-array\" target=\"_blank\" rel=\"noopener noreferer\">https://www.hackerrank.com/challenges/construct-the-array</a></p>\n<h1 id=\"solution\" class=\"heading\">Solution</h1>\n<h2 id=\"strategy\" class=\"heading\">Strategy</h2>\n<p>We will apply the idea of <code>Dynamic Programming</code>.</p>\n<ul>\n<li>Let <code>f(i)</code> indicates the number of ways to contruct array of <code>i</code> length and the last number <strong>must not be</strong> <code>x</code>.</li>\n<li>Let <code>g(i)</code> indicates the number of ways to contruct array of <code>i</code> length and the last number <strong>must be</strong> <code>x</code>.</li>\n</ul>\n<p>Easily we see <strong>the answer is <code>g(x)</code></strong>.\nWe can calculate some initial value without much difficulty.</p>\n<hr>\n<p>If x == 1</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n</span><span class=\"code-line\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n</span><span class=\"code-line\"><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</span><span class=\"code-line\"><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n</span></code></pre>\n<p>If x != 1</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</span><span class=\"code-line\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> <span class=\"token number\">2</span>\n</span><span class=\"code-line\"><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n</span><span class=\"code-line\"><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</span></code></pre>\n<p>Take a step back and observe, we would notice that <code>f(i)</code> and <code>g(i)</code> can be calculated using <code>f(i-1)</code> and <code>g(i-1)</code>.\nThere are only 1 way to pick <code>x</code> at position <code>i</code>, so</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token function\">g</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>If the previous number is not <code>x</code>, we will lost 2 candidates. Thus, there are <code>k - 2</code> ways to pick a number at <code>i</code>.\nIf the previous number is <code>x</code>, we only lost 1 candidate. Thus, there are <code>k - 1</code> ways to pick a number at <code>i</code>.\nCombine them we have</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>That's conclude our solution.</p>\n<h2 id=\"code\" class=\"heading\">Code</h2>\n<p>Readable code</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1000000007</span></span></span>\n</span><span class=\"code-line\"><span class=\"token keyword\">long</span> <span class=\"token function\">countArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">long</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">100001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">long</span> g<span class=\"token punctuation\">[</span><span class=\"token number\">100001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        g<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        g<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&#x3C;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>g<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>INF<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>\n<p>Optimized code</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp code-highlight\"><span class=\"code-line\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1000000007</span></span></span>\n</span><span class=\"code-line\"><span class=\"token keyword\">long</span> <span class=\"token function\">countArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">long</span> f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        g <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        f <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&#x3C;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">        tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>f <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>g<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>INF<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        g <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">        f <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\">    <span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span></code></pre>","ogImage":null},"__N_SSG":true}