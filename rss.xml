<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[Little Corner]]></title>
        <link>https://blog.hucanco.de</link>
        <description>
          <![CDATA[I write about programming, game and other random things, mostly random things.]]>
        </description>
        <language>en</language>
        <lastBuildDate>2022-06-21</lastBuildDate>
        <item>
    <title><![CDATA[Unreal Engine Networking - Session]]></title>
    <link>https://blog.hucanco.de/networking-session</link>
    <pubDate>2022-06-21</pubDate>
    <guid isPermaLink="false">https://blog.hucanco.de/networking-session</guid>
    <description>
    <![CDATA[How to use Session to implement a simple game lobby mechanic]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="introduction" class="heading">Introduction</h2>
<p><code>// Cool intro goes here</code></p>
<h3 id="make-sure-you-enabled-online-subsystem-plugin">Make sure you enabled online subsystem plugin</h3>
<p><code>// Super detail about how to enable online subsystem</code></p>
<h2 id="feature-design" class="heading">Feature design</h2>
<p><code>// Explain why we need CreateSession, FindSessions, JoinSessions, DestroySession</code></p>
<h2 id="core-functions" class="heading">Core functions</h2>
<h3 id="create-session">Create Session</h3>
<p>You can check for Epic's official implementation of <code>CreateSession</code> at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\CreateSessionCallbackProxy.cpp</code>
We need an <code>IOnlineSession</code> object to get going, usually you can get it with <code>Online::GetSubsystem::GetSessionInterface</code>. In there we pass a player ID, that player would be host player, in this case I use <code>GetPrimaryPlayerUniqueIdRepl</code>. With <code>FOnlineSessionSettings</code>, you can customize the session to your liking.</p>
<pre><code class="language-c# code-highlight"><span class="code-line">FOnlineSessionSettings Settings;
</span><span class="code-line">Settings.NumPublicConnections = 10;
</span><span class="code-line">Settings.bShouldAdvertise = true;
</span><span class="code-line">Settings.bAllowJoinInProgress = true;
</span><span class="code-line">Settings.bIsLANMatch = true;
</span><span class="code-line">Settings.bUsesPresence = true;
</span><span class="code-line">Settings.bAllowJoinViaPresence = true;
</span><span class="code-line">auto Sessions = Online::GetSubsystem(GetWorld())->GetSessionInterface();
</span><span class="code-line">Sessions->CreateSession(*GetPrimaryPlayerUniqueIdRepl(), NAME_GameSession, Settings);
</span></code></pre>
<h3 id="find-session">Find Session</h3>
<p>You can check for Epic's official implementation of <code>FindSessions</code> at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\FindSessionsCallbackProxy.cpp</code>
Result will be added to <code>SessionSearch</code></p>
<pre><code class="language-c++ code-highlight"><span class="code-line">// Declare this somewhere in your class property
</span><span class="code-line">TSharedRef&#x3C;FOnlineSessionSearch> SessionSearch;
</span><span class="code-line">// Find method
</span><span class="code-line">SessionSearch->bIsLanQuery = bIsLAN;
</span><span class="code-line">SessionSearch->MaxSearchResults = 20;
</span><span class="code-line">SessionSearch->PingBucketSize = 1000;
</span><span class="code-line">auto Sessions = Online::GetSubsystem(GetWorld())->GetSessionInterface();
</span><span class="code-line">Sessions->FindSessions(*GetPrimaryPlayerUniqueIdRepl(), SessionSearch);
</span></code></pre>
<h3 id="join-session">Join Session</h3>
<p>You can check for Epic's official implementation of <code>JoinSession</code> at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\JoinSessionCallbackProxy.cpp</code></p>
<pre><code class="language-c++ code-highlight"><span class="code-line">// Suppose we want to join the first game we found
</span><span class="code-line">int SessionIndexInSearchResults = 0;
</span><span class="code-line">FOnlineSessionSearchResult SearchResult = SessionSearch->SearchResults[SessionIndexInSearchResults];
</span><span class="code-line">auto Sessions = Online::GetSubsystem(GetWorld())->GetSessionInterface();
</span><span class="code-line">Sessions->JoinSession(*GetPrimaryPlayerUniqueIdRepl(), NAME_GameSession, SearchResult);
</span></code></pre>
<h3 id="destroy-session">Destroy Session</h3>
<p>You can check for Epic's official implementation of <code>JoinSession</code> at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\JoinSessionCallbackProxy.cpp</code></p>
<pre><code class="language-c++ code-highlight"><span class="code-line">auto Sessions = Online::GetSubsystem(GetWorld())->GetSessionInterface();
</span><span class="code-line">if (!Sessions->DestroySession(NAME_GameSession)) {
</span><span class="code-line">  GAME_LOG(Display, TEXT("Something went wrong during leaving"));
</span><span class="code-line">}
</span><span class="code-line">// TravelToHome();
</span><span class="code-line">
</span></code></pre>
<h2 id="expose-functionality-to-blueprint" class="heading">Expose functionality to Blueprint</h2>
<p><code>// Give working C++ code and screen shot BP scripts</code></p>
<h2 id="build-an-user-interface" class="heading">Build an user interface</h2>
<p><code>// UI Screenshot</code></p>
<h2 id="conclusions" class="heading">Conclusions</h2>
<p><code>// Some nice paragraph goes here</code></p>
<h3 id="learn-more">Learn more</h3>
<p>Official documentation: <a href="https://docs.unrealengine.com/5.0/en-US/online-subsystem-in-unreal-engine/" target="_blank" rel="noopener noreferer">https://docs.unrealengine.com/5.0/en-US/online-subsystem-in-unreal-engine/</a></p>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>