<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[Little Corner]]></title>
        <link>https://blog.hucanco.de</link>
        <description>
          <![CDATA[I write about programming, game and other random things, mostly random things.]]>
        </description>
        <language>en</language>
        <lastBuildDate>2022-06-23</lastBuildDate>
        <item>
    <title><![CDATA[Construct the array (Medium)]]></title>
    <link>https://blog.hucanco.de/construct-the-array</link>
    <pubDate>2022-06-23</pubDate>
    <guid isPermaLink="false">https://blog.hucanco.de/construct-the-array</guid>
    <description>
    <![CDATA[How to use Dynamic Programming to solve a programming puzzle]]>
    </description>
    <content:encoded>
      <![CDATA[<h1 id="problem" class="heading">Problem</h1>
<p>Your goal is to find the number of ways to construct an array such that consecutive positions contain different values.</p>
<p>Specifically, we want to construct an array with <code>n</code> elements such that each element between <code>1</code> and <code>k</code>, inclusive. We also want the first and last elements of the array to be <code>1</code> and <code>x</code>.</p>
<h2 id="example" class="heading">Example</h2>
<p>For example, for <code>n=4</code>, <code>k=3</code>, <code>x=2</code>, there are <code>3</code> ways, as shown here:</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span>
</span><span class="code-line"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span>
</span><span class="code-line"><span class="token number">1</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span>
</span></code></pre>
<h2 id="constraints" class="heading">Constraints</h2>
<ul>
<li>3 &#x3C;= n &#x3C;= 10<sup>5</sup></li>
<li>2 &#x3C;= k &#x3C;= 10<sup>5</sup></li>
<li>1 &#x3C;= x &#x3C;= k</li>
</ul>
<p>Read more: <a href="https://www.hackerrank.com/challenges/construct-the-array" target="_blank" rel="noopener noreferer">https://www.hackerrank.com/challenges/construct-the-array</a></p>
<h1 id="solution" class="heading">Solution</h1>
<h2 id="strategy" class="heading">Strategy</h2>
<p>We will apply the idea of <code>Dynamic Programming</code>.</p>
<ul>
<li>Let <code>f(i)</code> indicates the number of ways to contruct array of <code>i</code> length and the last number <strong>must not be</strong> <code>x</code>.</li>
<li>Let <code>g(i)</code> indicates the number of ways to contruct array of <code>i</code> length and the last number <strong>must be</strong> <code>x</code>.</li>
</ul>
<p>Easily we see <strong>the answer is <code>g(x)</code></strong>.
We can calculate some initial value without much difficulty.</p>
<hr>
<p>If x == 1</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</span></code></pre>
<p>If x != 1</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">2</span>
</span><span class="code-line"><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
</span></code></pre>
<p>Take a step back and observe, we would notice that <code>f(i)</code> and <code>g(i)</code> can be calculated using <code>f(i-1)</code> and <code>g(i-1)</code>.
There are only 1 way to pick <code>x</code> at position <code>i</code>, so</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">g</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span></code></pre>
<p>If the previous number is not <code>x</code>, we will lost 2 candidates. Thus, there are <code>k - 2</code> ways to pick a number at <code>i</code>.
If the previous number is <code>x</code>, we only lost 1 candidate. Thus, there are <code>k - 1</code> ways to pick a number at <code>i</code>.
Combine them we have</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span></code></pre>
<p>That's conclude our solution.</p>
<h2 id="code" class="heading">Code</h2>
<p>Readable code</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">1000000007</span></span></span>
</span><span class="code-line"><span class="token keyword">long</span> <span class="token function">countArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">long</span> f<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">long</span> g<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&#x3C;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>INF<span class="token punctuation">;</span>
</span><span class="code-line">        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">return</span> g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Optimized code</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">1000000007</span></span></span>
</span><span class="code-line"><span class="token keyword">long</span> <span class="token function">countArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">long</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        g <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">        f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">        f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&#x3C;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>f <span class="token operator">+</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">%</span>INF<span class="token punctuation">;</span>
</span><span class="code-line">        g <span class="token operator">=</span> f<span class="token punctuation">;</span>
</span><span class="code-line">        f <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Unreal Engine Networking - Session]]></title>
    <link>https://blog.hucanco.de/networking-session</link>
    <pubDate>2022-06-21</pubDate>
    <guid isPermaLink="false">https://blog.hucanco.de/networking-session</guid>
    <description>
    <![CDATA[How to use Session to implement a simple game lobby mechanic]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="introduction" class="heading">Introduction</h2>
<h3 id="feature-design">Feature design</h3>
<p>In this article we will build a host game/join game mechanic. Player are allowed to 'host' a game. After that people joining games and start playing.
There are 4 operations we will be implementing here</p>
<ul>
<li>Host Game - <code>Create Session</code> in UE term</li>
<li>List Opening Game - <code>Find Sessions</code> in UE term</li>
<li>Join Game - <code>Join Session</code> in UE term</li>
<li>Leave Game - <code>Destroy Session</code> in UE term</li>
<li>Start Game - After all player are gathered, host player can decide to start the game</li>
</ul>
<h3 id="before-we-begin">Before we begin</h3>
<h4 id="make-sure-you-enabled-online-subsystem-plugin">Make sure you enabled online subsystem plugin</h4>
<p>Open <code>Plugin Settings</code>, and enable <code>Online Base</code>, <code>Online Subsystem</code>, <code>Online Subsystem Utils</code>. Then enable Steam, or something else according to your case. In this case, I just want to connect over LAN so I went with <code>Online Subsystem NULL</code></p>
<p>Your setting would looks like this
<img src="ue/networking-session/plugin-setting.png" alt=""></p>
<h4 id="set-pie-player-count-to-at-least-2">Set PIE player count to at least 2</h4>
<p>We need at least 2 players to test this kind of behavior. By default it's 1, so adjust number of players accordingly. Their <code>Net Mode</code> have to be <code>Standalone</code></p>
<p>Your setting would looks like this
<img src="ue/networking-session/play-setting.png" alt=""></p>
<h2 id="core-functions" class="heading">Core functions</h2>
<h3 id="create-session">Create session</h3>
<p>You can check for Epic's official implementation of <code>CreateSession</code> at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\CreateSessionCallbackProxy.cpp</code>
First we need to declare some <code>Delegate</code></p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.h</span>
</span><span class="code-line">FOnCreateSessionCompleteDelegate OnCreateSessionCompleteDelegate<span class="token punctuation">;</span>
</span><span class="code-line">FOnStartSessionCompleteDelegate OnStartSessionCompleteDelegate<span class="token punctuation">;</span>
</span><span class="code-line">FDelegateHandle OnCreateSessionCompleteDelegateHandle<span class="token punctuation">;</span>
</span><span class="code-line">FDelegateHandle OnStartSessionCompleteDelegateHandle<span class="token punctuation">;</span>
</span></code></pre>
<p>Setup delegate in your class constructor</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.cpp/Init method</span>
</span><span class="code-line">OnCreateSessionCompleteDelegate <span class="token operator">=</span>
</span><span class="code-line">  <span class="token class-name">FOnCreateSessionCompleteDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span>UMyGameInstance<span class="token double-colon punctuation">::</span>OnCreateSessionComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">OnStartSessionCompleteDelegate <span class="token operator">=</span>
</span><span class="code-line">  <span class="token class-name">FOnStartSessionCompleteDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span>UMyGameInstance<span class="token double-colon punctuation">::</span>OnStartSessionComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>The actual create method would looks like this.</p>
<p>We need an <code>IOnlineSession</code> object to get going, usually you can get it with <code>Online::GetSubsystem::GetSessionInterface</code>.
In there we pass a player ID, that player would be host player, in this case I use <code>GetPrimaryPlayerUniqueIdRepl</code>.</p>
<p>Customization is done via <code>FOnlineSessionSettings</code>.
Note that those settings are pretty fragile, your game might not be found by others if not done correctly.
The options below are confirmed working in <code>UE 5.0</code> for creating a LAN game.</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">bool</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">CreateSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  FOnlineSessionSettings Settings<span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>NumPublicConnections <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>bShouldAdvertise <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>bAllowJoinInProgress <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>bIsLANMatch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>bUsesPresence <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  Settings<span class="token punctuation">.</span>bAllowJoinViaPresence <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  OnCreateSessionCompleteDelegateHandle <span class="token operator">=</span>
</span><span class="code-line">    Sessions<span class="token operator">-></span><span class="token function">AddOnCreateSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnCreateSessionCompleteDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">return</span> Sessions<span class="token operator">-></span><span class="token function">CreateSession</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token operator">*</span><span class="token function">GetPrimaryPlayerUniqueIdRepl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_GameSession<span class="token punctuation">,</span> Settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">OnCreateSessionComplete</span><span class="token punctuation">(</span>
</span><span class="code-line">    FName SessionName<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Clear the SessionComplete delegate handle, since we finished this call</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">ClearOnCreateSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnCreateSessionCompleteDelegateHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token comment">// Set the StartSession delegate handle</span>
</span><span class="code-line">  OnStartSessionCompleteDelegateHandle <span class="token operator">=</span>
</span><span class="code-line">      Sessions<span class="token operator">-></span><span class="token function">AddOnStartSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">          OnStartSessionCompleteDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">StartSession</span><span class="token punctuation">(</span>NAME_GameSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">OnStartSessionComplete</span><span class="token punctuation">(</span>
</span><span class="code-line">    FName SessionName<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Clear the delegate, since we are done with this call</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">ClearOnStartSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnStartSessionCompleteDelegateHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token comment">// Assume that lobby map are named "Lobby"</span>
</span><span class="code-line">  <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">OpenLevel</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Lobby"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h3 id="find-session">Find session</h3>
<p>Official implementation of <code>FindSessions</code> is at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\FindSessionsCallbackProxy.cpp</code>
Result will be populated to <code>SessionSearch</code></p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// Declare this somewhere in your class property, we will need this in other methods</span>
</span><span class="code-line">TSharedRef<span class="token operator">&#x3C;</span>FOnlineSessionSearch<span class="token operator">></span> SessionSearch<span class="token punctuation">;</span>
</span><span class="code-line">FOnFindSessionsCompleteDelegate OnFindSessionsCompleteDelegate<span class="token punctuation">;</span>
</span><span class="code-line">FDelegateHandle OnFindSessionsCompleteDelegateHandle<span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.cpp/Init method</span>
</span><span class="code-line">OnFindSessionsCompleteDelegate <span class="token operator">=</span>
</span><span class="code-line">  <span class="token class-name">FOnFindSessionsCompleteDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span>UMyGameInstance<span class="token double-colon punctuation">::</span>OnFindSessionsComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// Find method</span>
</span><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">FindSessions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  SessionSearch<span class="token operator">-></span>bIsLanQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  SessionSearch<span class="token operator">-></span>MaxSearchResults <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</span><span class="code-line">  SessionSearch<span class="token operator">-></span>PingBucketSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  OnFindSessionsCompleteDelegateHandle <span class="token operator">=</span>
</span><span class="code-line">    Sessions<span class="token operator">-></span><span class="token function">AddOnFindSessionsCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnFindSessionsCompleteDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">FindSessions</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">GetPrimaryPlayerUniqueIdRepl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SessionSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><strong>We use a <code>TSharedRef</code> but not a <code>TSharedPtr</code> because shared reference guaranteed object to not be null, while shared pointer don't have that property.</strong></p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">OnFindSessionsComplete</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Clear the Delegate handle, since we finished this call</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">ClearOnFindSessionsCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnFindSessionsCompleteDelegateHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Additionally, you might want to send the list to Blueprint</span>
</span><span class="code-line">  TArray<span class="token operator">&#x3C;</span>FString<span class="token operator">></span> Names<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> result <span class="token operator">:</span> SessionSearch<span class="token operator">-></span>SearchResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    Names<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>OwningUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token comment">// UpdateSessionList is a blueprint event, implemented by adding those in your header file</span>
</span><span class="code-line">  <span class="token comment">// MyGameInstance.h</span>
</span><span class="code-line">  <span class="token comment">// UFUNCTION(BlueprintImplementableEvent, DisplayName = UpdateSessionList)</span>
</span><span class="code-line">  <span class="token comment">// void UpdateSessionList(const TArray&#x3C;FString>&#x26; Results);</span>
</span><span class="code-line">  <span class="token function">UpdateSessionList</span><span class="token punctuation">(</span>Names<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h3 id="join-session">Join session</h3>
<p>Official implementation of <code>JoinSession</code> is at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\JoinSessionCallbackProxy.cpp</code></p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.h</span>
</span><span class="code-line">TSharedRef<span class="token operator">&#x3C;</span>FOnlineSessionSearch<span class="token operator">></span> SessionSearch<span class="token punctuation">;</span>
</span><span class="code-line">FOnJoinSessionCompleteDelegate OnJoinSessionCompleteDelegate<span class="token punctuation">;</span>
</span><span class="code-line">FDelegateHandle OnJoinSessionCompleteDelegateHandle<span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.cpp/Init method</span>
</span><span class="code-line">OnJoinSessionCompleteDelegate <span class="token operator">=</span> <span class="token class-name">FOnJoinSessionCompleteDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span>UMyGameInstance<span class="token double-colon punctuation">::</span>OnJoinSessionComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">bool</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">JoinSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// Suppose that we want to join the first game we found</span>
</span><span class="code-line">  <span class="token keyword">if</span><span class="token punctuation">(</span>SessionSearch<span class="token operator">-></span>SearchResults<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  FOnlineSessionSearchResult SearchResult <span class="token operator">=</span> SessionSearch<span class="token operator">-></span>SearchResults<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  OnJoinSessionCompleteDelegateHandle <span class="token operator">=</span>
</span><span class="code-line">    Sessions<span class="token operator">-></span><span class="token function">AddOnJoinSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnJoinSessionCompleteDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">JoinSession</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">GetPrimaryPlayerUniqueIdRepl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME_GameSession<span class="token punctuation">,</span> SearchResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">OnJoinSessionComplete</span><span class="token punctuation">(</span>
</span><span class="code-line">    FName SessionName<span class="token punctuation">,</span> EOnJoinSessionCompleteResult<span class="token double-colon punctuation">::</span>Type Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Clear the Delegate again</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">ClearOnJoinSessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnJoinSessionCompleteDelegateHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token keyword">auto</span> PlayerController <span class="token operator">=</span> <span class="token function">GetFirstLocalPlayerController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// We need a FString to use ClientTravel and we can let the</span>
</span><span class="code-line">  <span class="token comment">// SessionInterface contruct such a String for us by giving him the</span>
</span><span class="code-line">  <span class="token comment">// SessionName and an empty String. We want to do this, because Every</span>
</span><span class="code-line">  <span class="token comment">// OnlineSubsystem uses different TravelURLs</span>
</span><span class="code-line">  FString TravelURL<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PlayerController <span class="token operator">||</span>
</span><span class="code-line">      <span class="token operator">!</span>Sessions<span class="token operator">-></span><span class="token function">GetResolvedConnectString</span><span class="token punctuation">(</span>SessionName<span class="token punctuation">,</span> TravelURL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  PlayerController<span class="token operator">-></span><span class="token function">ClientTravel</span><span class="token punctuation">(</span>TravelURL<span class="token punctuation">,</span> ETravelType<span class="token double-colon punctuation">::</span>TRAVEL_Absolute<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>In this example, for the sake of simplicity I let player join the first game in the result. In real project, you might probably want have an GUI for player to pick a game to join.</p>
<h3 id="destroy-session">Destroy session</h3>
<p>Official implementation of <code>DestroySession</code> is at <code>Engine\Plugins\Online\OnlineSubsystemUtils\Source\OnlineSubsystemUtils\Private\DestroySessionCallbackProxy.cpp</code></p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.h</span>
</span><span class="code-line">FOnDestroySessionCompleteDelegate OnDestroySessionCompleteDelegate<span class="token punctuation">;</span>
</span><span class="code-line">FDelegateHandle OnDestroySessionCompleteDelegateHandle<span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token comment">// MyGameInstance.cpp/Init method</span>
</span><span class="code-line">OnDestroySessionCompleteDelegate <span class="token operator">=</span>
</span><span class="code-line">  <span class="token class-name">FOnDestroySessionCompleteDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&#x26;</span>UMyGameInstance<span class="token double-colon punctuation">::</span>OnDestroySessionComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">LeaveSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">AddOnDestroySessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnDestroySessionCompleteDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">DestroySession</span><span class="token punctuation">(</span>NAME_GameSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Suppose your main menu map is named "Home"</span>
</span><span class="code-line">  <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">OpenLevel</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Home"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">OnDestroySessionComplete</span><span class="token punctuation">(</span>
</span><span class="code-line">    FName SessionName<span class="token punctuation">,</span> <span class="token keyword">bool</span> bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">auto</span> Sessions <span class="token operator">=</span> <span class="token class-name">Online</span><span class="token double-colon punctuation">::</span><span class="token function">GetSubsystem</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetSessionInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// Clear the Delegate</span>
</span><span class="code-line">  Sessions<span class="token operator">-></span><span class="token function">ClearOnDestroySessionCompleteDelegate_Handle</span><span class="token punctuation">(</span>
</span><span class="code-line">      OnDestroySessionCompleteDelegateHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bWasSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token comment">// Suppose your main menu map is named "Home"</span>
</span><span class="code-line">  <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">OpenLevel</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Home"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h3 id="start-game">Start game</h3>
<p>Start a game is quite simple. We travel to the action map, host player call the travel function, all connected client will follow.</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token keyword">void</span> <span class="token class-name">UMyGameInstance</span><span class="token double-colon punctuation">::</span><span class="token function">StartGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// Only lobby host can start game</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetFirstLocalPlayerController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">ServerTravel</span><span class="token punctuation">(</span><span class="token string">"/Game/Maps/LegoDungeon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h2 id="expose-functionality-to-blueprint" class="heading">Expose functionality to Blueprint</h2>
<p>C++ is awesome I know, but compiling code is a pain, no joke. Lucky for us, there have Blueprint come to the rescue. Changes in Blueprint are reflected almost instantly.</p>
<p>First you can define which C++ method support Blueprint by adding <code>UFUNCTION(BlueprintCallable)</code>on their head. Like this</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">bool</span> <span class="token function">CreateSession</span><span class="token punctuation">(</span><span class="token keyword">const</span> FString HostPlayerName<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIsLAN<span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token keyword">bool</span> bIsPresence<span class="token punctuation">,</span> <span class="token keyword">const</span> int32 MaxNumPlayers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>Then in Blueprint you can do this.</p>
<p><img src="ue/networking-session/blueprint-create-session.png" alt=""></p>
<p>The same apply for</p>
<pre class="language-cpp"><code class="language-cpp code-highlight"><span class="code-line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> DisplayName <span class="token operator">=</span> FindSessions<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">void</span> <span class="token function">FindSessions</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bIsLAN<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIsPresence<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>The code above allow us to do this in Blueprint</p>
<p><img src="ue/networking-session/blueprint-find-session.png" alt=""></p>
<h2 id="build-an-user-interface" class="heading">Build an user interface</h2>
<p>We have all the pieces, now let's glue them all together with an UI.</p>
<h3 id="main-menu">Main menu</h3>
<p>Create game</p>
<p><img src="ue/networking-session/ui-create.png" alt=""></p>
<p>Find game</p>
<p><img src="ue/networking-session/ui-find.png" alt="">
<img src="ue/networking-session/ui-find-error.png" alt=""></p>
<p>Join game</p>
<p><img src="ue/networking-session/ui-join.png" alt=""></p>
<h3 id="lobby">Lobby</h3>
<p>Lobby</p>
<p><img src="ue/networking-session/ui-lobby.png" alt=""></p>
<p>Start game</p>
<p><img src="ue/networking-session/ui-start.png" alt=""></p>
<p>And that's the final result when it all connected together</p>
<p><img src="ue/networking-session/ui-all.webp" alt=""></p>
<h2 id="conclusions" class="heading">Conclusions</h2>
<p>Here are complete working C++ code, please check this
<a href="ue/networking-session/MyGameInstance.cpp">MyGameInstance.cpp</a> and <a href="ue/networking-session/MyGameInstance.h">MyGameInstance.h</a></p>
<h3 id="learn-more">Learn more</h3>
<ul>
<li>Multiplayer tutorial, if you have some time to spare, definitely check <a href="https://www.youtube.com/watch?v=abmzWUWxy1U&#x26;list=PLZlv_N0_O1gYqSlbGQVKsRg6fpxWndZqZ" target="_blank" rel="noopener noreferer">this</a> out</li>
<li><a href="https://docs.unrealengine.com/5.0/en-US/online-subsystem-in-unreal-engine/" target="_blank" rel="noopener noreferer">Official documentation</a></li>
</ul>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>